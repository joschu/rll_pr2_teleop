"""autogenerated by genmsg_py from CalibPaddle.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class CalibPaddle(roslib.message.Message):
  _md5sum = "9aa188f8a684b5f86f071eb093833ed5"
  _type = "sixense/CalibPaddle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Transform transform
bool[7] buttons
float32[2] joy
float32 trigger

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['transform','buttons','joy','trigger']
  _slot_types = ['geometry_msgs/Transform','bool[7]','float32[2]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       transform,buttons,joy,trigger
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CalibPaddle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      if self.buttons is None:
        self.buttons = [False,False,False,False,False,False,False]
      if self.joy is None:
        self.joy = [0.,0.]
      if self.trigger is None:
        self.trigger = 0.
    else:
      self.transform = geometry_msgs.msg.Transform()
      self.buttons = [False,False,False,False,False,False,False]
      self.joy = [0.,0.]
      self.trigger = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w))
      buff.write(_struct_7B.pack(*self.buttons))
      buff.write(_struct_2f.pack(*self.joy))
      buff.write(_struct_f.pack(self.trigger))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 7
      self.buttons = _struct_7B.unpack(str[start:end])
      self.buttons = map(bool, self.buttons)
      start = end
      end += 8
      self.joy = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (self.trigger,) = _struct_f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w))
      buff.write(self.buttons.tostring())
      buff.write(self.joy.tostring())
      buff.write(_struct_f.pack(self.trigger))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.transform is None:
        self.transform = geometry_msgs.msg.Transform()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.transform.translation.x, _x.transform.translation.y, _x.transform.translation.z, _x.transform.rotation.x, _x.transform.rotation.y, _x.transform.rotation.z, _x.transform.rotation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 7
      self.buttons = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=7)
      self.buttons = map(bool, self.buttons)
      start = end
      end += 8
      self.joy = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 4
      (self.trigger,) = _struct_f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2f = struct.Struct("<2f")
_struct_7d = struct.Struct("<7d")
_struct_7B = struct.Struct("<7B")
_struct_f = struct.Struct("<f")
